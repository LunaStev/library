import("iosys");

// WSONParseError Defining an Exception
fun WSONParseError(message: str, line: i32 = -1, column: i32 = -1) {
    if (line != -1 && column != -1) {
        println("Error: " + message + " (line " + line + ", column " + column + ")");
    } else {
        println("Error: " + message);
    }
}

fun remove_comments(wson_str: str): str {
    var lines: [str] = wson_str.split("\n");
    var cleaned_lines: [str] = [];
    var in_block_comment: bool = false;

    for (var i: i32 = 0; i < lines.len(); i++) {
        var line: str = lines[i];

        if (in_block_comment) {
            var end_index: i32 = line.find("*/");
            if (end_index != -1) {
                line = line.substr(end_index + 2);
                in_block_comment = false;
            } else {
                continue;
            }
        }

        while (line.contains("/*")) {
            var start_index: i32 = line.find("/*");
            var end_index: i32 = line.find("*/", start_index + 2);
            if (end_index != -1) {
                line = line.substr(0, start_index);
            } else {
                line = line.substr(0, start_index);
                in_block_comment = true;
                break;
            }
        }

        var comment_index: i32 = line.find("//");
        var hash_index: i32 = line.find("#");
        if (comment_index != -1) {
            line = line.substr(0, comment_index);
        } else if (hash_index != -1) {
            line = line.substr(0, hash_index);
        }

        if (line.trim() != "") {
            cleaned_lines.append(line.rstrip());
        }
    }
    return cleaned_lines.join("\n");
}

fun parse_value(value: str, line: i32, column: i32) {
    value = value.trim();
    if (value == "") {
        return null;
    }
    if (value.startsWith("\"") && value.endsWith("\"")) {
        return value.substr(1, value.len() - 2); // String
    } else if (value.lower() in ["true", "false"]) {
        return value.lower() == "true"; // boolean
    } else if (value.matches(r"^-?\d+(\.\d+)?$")) {
        return value.contains(".") ? value.to_float() : value.to_int();
    } else if (value.matches(r"^\d{4}-\d{2}-\d{2}$")) { // Date (YYYY-MM-DD)
        return value; // Add date processing later
    } else if (value.matches(r"^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$")) { // Date + time
        return value; // Add date + time processing later
    } else if (value.matches(r"^\d+(\.\d+)+$")) { // Version
        return value.split(".").map(i32); // Version Processing
    } else if (value.startsWith("{") && value.endsWith("}")) {
        return convert_wson_to_dict(value, line, column); // Overlapping WSON calls
    } else if (value.startsWith("[") && value.endsWith("]")) {
        return parse_array(value, line, column); // Call array parsing function
    }
    WSONParseError("Invalid value: " + value, line, column);
}

fun parse_array(array_str: str, line: i32, column: i32): [any] {
    array_str = array_str.substr(1, array_str.len() - 2).trim(); // [] Remove
    var items: [any] = [];
    var current_item: str = "";
    var brace_count: i32 = 0;
    var bracket_count: i32 = 0;

    for (var i: i32 = 0; i < array_str.len(); i++) {
        var char: str = array_str[i];

        if (char == "{") {
            brace_count += 1;
        } else if (char == "}") {
            brace_count -= 1;
        } else if (char == "[") {
            bracket_count += 1;
        } else if (char == "]") {
            bracket_count -= 1;
        }

        if (char == "," && brace_count == 0 && bracket_count == 0) {
            items.append(parse_value(current_item.trim(), line, column + i));
            current_item = "";
        } else {
            current_item += char;
        }
    }

    if (current_item.trim() != "") {
        items.append(parse_value(current_item.trim(), line, column + array_str.len()));
    }

    return items;
}

fun convert_wson_to_dict(wson_str: str, start_line: i32 = 1, start_column: i32 = 1): map {
    wson_str = wson_str.trim();
    if (!(wson_str.startsWith("{") && wson_str.endsWith("}"))) {
        WSONParseError("WSON format must start and end with curly braces.", start_line, start_column);
    }

    wson_str = wson_str.substr(1, wson_str.len() - 2); // {} Remove
    var data: map = {};
    var key: str = "";
    var value: str = "";
    var in_key: bool = true;
    var brace_count: i32 = 0;
    var bracket_count: i32 = 0;
    var line: i32 = start_line;
    var column: i32 = start_column;

    for (var i: i32 = 0; i < wson_str.len(); i++) {
        var char: str = wson_str[i];

        if (char == "\n") {
            line += 1;
            column = start_column;
            continue;
        }

        if ((char == "=" || char == ":") && in_key && brace_count == 0 && bracket_count == 0) {
            in_key = false;
            continue;
        }

        if (char == "{") {
            brace_count += 1;
        } else if (char == "}") {
            brace_count -= 1;
        } else if (char == "[") {
            bracket_count += 1;
        } else if (char == "]") {
            bracket_count -= 1;
        }

        if (char == "," && brace_count == 0 && bracket_count == 0) {
            if (key != "") {
                data[key.trim()] = parse_value(value.trim(), line, column + i);
                key = "";
                value = "";
                in_key = true;
            }
        } else if (in_key) {
            key += char;
        } else {
            value += char;
        }
    }

    if (key != "") {
        data[key.trim()] = parse_value(value.trim(), line, column + wson_str.len());
    }

    return data;
}

fun serialize_wson(data: map, indent: str = ""): str {
    return "{\n" + serialize_dict(data, indent + "    ") + "\n" + indent + "}";
}

fun serialize_dict(data: map, indent: str = ""): str {
    var items: [str] = [];
    for (var key in data.keys()) {
        var value = data[key];
        if (value is map) {
            items.append(indent + key + " = " + serialize_wson(value, indent));
        } else if (value is [any]) {
            items.append(indent + key + " = [\n" + serialize_list(value, indent + "    ") + "\n" + indent + "]");
        } else if (value is str) {
            items.append(indent + key + " = \"" + value + "\"");
        } else if (value == null) {
            items.append(indent + key + " = null");
        } else {
            items.append(indent + key + " = " + value);
        }
    }
    return items.join(",\n\n");
}

fun serialize_list(data: [any], indent: str = ""): str {
    var items: [str] = [];
    for (var item in data) {
        if (item is map) {
            items.append(indent + serialize_wson(item, indent));
        } else if (item is [any]) {
            items.append(indent + "[\n" + serialize_list(item, indent + "    ") + "\n" + indent + "]");
        } else if (item is str) {
            items.append(indent + "\"" + item + "\"");
        } else if (item == null) {
            items.append(indent + "null");
        } else {
            items.append(indent + item);
        }
    }
    return items.join(",\n");
}

fun dumps(data: any): str {
    return serialize_wson(data);
}

fun loads(wson_str: str): any {
    return parse_wson(wson_str);
}

fun validate_wson(wson_str: str): bool {
    try {
        parse_wson(wson_str);
        return true;
    } catch (WSONParseError) {
        return false;
    }
}
